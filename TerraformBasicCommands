terraform init
terraform plan --var-file SelfDevVars.tfvars
terraform plan --var-file SelfDevVars.tfvars -out MyInfraPlan
terraform apply "MyInfraPlan"



OUTPUT:
Microsoft Windows [Version 10.0.19044.2486]
(c) Microsoft Corporation. All rights reserved.

D:\Cloud\terraform\Sample1>ls
'ls' is not recognized as an internal or external command,
operable program or batch file.

D:\Cloud\terraform\Sample1>dir
 Volume in drive D is Secure - Do not Touch
 Volume Serial Number is ACA1-E85F

 Directory of D:\Cloud\terraform\Sample1

09-Feb-23  08:27 PM    <DIR>          .
09-Feb-23  08:27 PM    <DIR>          ..
09-Feb-23  10:04 PM             3,755 SelfDevMain.tf
09-Feb-23  10:14 PM               705 SelfDevVars.tfvars
               2 File(s)          4,460 bytes
               2 Dir(s)  212,202,983,424 bytes free

D:\Cloud\terraform\Sample1>terraform init

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/aws versions matching "<= 5.0.0"...
- Installing hashicorp/aws v4.53.0...
- Installed hashicorp/aws v4.53.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

D:\Cloud\terraform\Sample1>terraform plan --var-file SelfDevVars.tfvars
╷
│ Warning: Value for undeclared variable
│
│ The root module does not declare a variable named "private_subnet_name" but a value was found in file
│ "SelfDevVars.tfvars". If you meant to use this value, add a "variable" block to the configuration.
│
│ To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all
│ configurations in your organization. To reduce the verbosity of these warnings, use the -compact-warnings option.
╵
╷
│ Warning: Value for undeclared variable
│
│ The root module does not declare a variable named "key_name" but a value was found in file "SelfDevVars.tfvars". If
│ you meant to use this value, add a "variable" block to the configuration.
│
│ To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all
│ configurations in your organization. To reduce the verbosity of these warnings, use the -compact-warnings option.
╵
╷
│ Warning: Values for undeclared variables
│
│ In addition to the other similar warnings shown, 15 other variable(s) defined without being declared.
╵
╷
│ Error: Reference to undeclared input variable
│
│   on SelfDevMain.tf line 3, in provider "aws":
│    3:     access_key = "${var.aws_access_key}"
│
│ An input variable with the name "aws_access_key" has not been declared. This variable can be declared with a variable
│ "aws_access_key" {} block.
╵
╷
│ Error: Reference to undeclared input variable
│
│   on SelfDevMain.tf line 4, in provider "aws":
│    4:     secret_key = "${var.aws_secret_key}"
│
│ An input variable with the name "aws_secret_key" has not been declared. This variable can be declared with a variable
│ "aws_secret_key" {} block.
╵
╷
│ Error: Reference to undeclared input variable
│
│   on SelfDevMain.tf line 5, in provider "aws":
│    5:     region = "${var.aws_region}"
│
│ An input variable with the name "aws_region" has not been declared. This variable can be declared with a variable
│ "aws_region" {} block.
╵

D:\Cloud\terraform\Sample1>terraform plan --var-file SelfDevVars.tfvars

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # aws_internet_gateway.default will be created
  + resource "aws_internet_gateway" "default" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "terraform-aws-igw"
        }
      + tags_all = {
          + "Name" = "terraform-aws-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_route_table.terraform-public will be created
  + resource "aws_route_table" "terraform-public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "Terraform_Main_table-testing"
        }
      + tags_all         = {
          + "Name" = "Terraform_Main_table-testing"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.terraform-public will be created
  + resource "aws_route_table_association" "terraform-public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.allow_all will be created
  + resource "aws_security_group" "allow_all" {
      + arn                    = (known after apply)
      + description            = "Allow all inbound traffic"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "allow_all"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.subnet1-public will be created
  + resource "aws_subnet" "subnet1-public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.100.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "Terraform_Public_Subnet1-testing"
        }
      + tags_all                                       = {
          + "Name" = "Terraform_Public_Subnet1-testing"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.subnet2-public will be created
  + resource "aws_subnet" "subnet2-public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.100.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "Terraform_Public_Subnet2-testing"
        }
      + tags_all                                       = {
          + "Name" = "Terraform_Public_Subnet2-testing"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.subnet3-public will be created
  + resource "aws_subnet" "subnet3-public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.100.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "Terraform_Public_Subnet3-testing"
        }
      + tags_all                                       = {
          + "Name" = "Terraform_Public_Subnet3-testing"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.default will be created
  + resource "aws_vpc" "default" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.100.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name"        = "terraform-aws-testing"
          + "Owner"       = "Suresh Modduri"
          + "environment" = "dev"
        }
      + tags_all                             = {
          + "Name"        = "terraform-aws-testing"
          + "Owner"       = "Suresh Modduri"
          + "environment" = "dev"
        }
    }

Plan: 8 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if
you run "terraform apply" now.

D:\Cloud\terraform\Sample1>terraform plan --var-file SelfDevVars.tfvars -out MyInfraPlan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # aws_internet_gateway.default will be created
  + resource "aws_internet_gateway" "default" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "terraform-aws-igw"
        }
      + tags_all = {
          + "Name" = "terraform-aws-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_route_table.terraform-public will be created
  + resource "aws_route_table" "terraform-public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "Terraform_Main_table-testing"
        }
      + tags_all         = {
          + "Name" = "Terraform_Main_table-testing"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.terraform-public will be created
  + resource "aws_route_table_association" "terraform-public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.allow_all will be created
  + resource "aws_security_group" "allow_all" {
      + arn                    = (known after apply)
      + description            = "Allow all inbound traffic"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "allow_all"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.subnet1-public will be created
  + resource "aws_subnet" "subnet1-public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.100.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "Terraform_Public_Subnet1-testing"
        }
      + tags_all                                       = {
          + "Name" = "Terraform_Public_Subnet1-testing"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.subnet2-public will be created
  + resource "aws_subnet" "subnet2-public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.100.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "Terraform_Public_Subnet2-testing"
        }
      + tags_all                                       = {
          + "Name" = "Terraform_Public_Subnet2-testing"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.subnet3-public will be created
  + resource "aws_subnet" "subnet3-public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.100.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "Terraform_Public_Subnet3-testing"
        }
      + tags_all                                       = {
          + "Name" = "Terraform_Public_Subnet3-testing"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.default will be created
  + resource "aws_vpc" "default" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.100.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name"        = "terraform-aws-testing"
          + "Owner"       = "Suresh Modduri"
          + "environment" = "dev"
        }
      + tags_all                             = {
          + "Name"        = "terraform-aws-testing"
          + "Owner"       = "Suresh Modduri"
          + "environment" = "dev"
        }
    }

Plan: 8 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: MyInfraPlan

To perform exactly these actions, run the following command to apply:
    terraform apply "MyInfraPlan"

D:\Cloud\terraform\Sample1>terraform apply "MyInfraPlan"
aws_vpc.default: Creating...
aws_vpc.default: Still creating... [10s elapsed]
aws_vpc.default: Creation complete after 15s [id=vpc-04a6491f02a7089bd]
aws_internet_gateway.default: Creating...
aws_subnet.subnet2-public: Creating...
aws_subnet.subnet1-public: Creating...
aws_subnet.subnet3-public: Creating...
aws_security_group.allow_all: Creating...
aws_internet_gateway.default: Creation complete after 2s [id=igw-0b81e78fbfe258ca1]
aws_subnet.subnet1-public: Creation complete after 2s [id=subnet-02d4be11db605c99b]
aws_route_table.terraform-public: Creating...
aws_subnet.subnet3-public: Creation complete after 2s [id=subnet-06cb082d2b3e00175]
aws_subnet.subnet2-public: Creation complete after 2s [id=subnet-07297fe686ab1247b]
aws_security_group.allow_all: Creation complete after 3s [id=sg-001e4dae4b9e9e610]
aws_route_table.terraform-public: Creation complete after 2s [id=rtb-08615c19175916856]
aws_route_table_association.terraform-public: Creating...
aws_route_table_association.terraform-public: Creation complete after 1s [id=rtbassoc-0da7b5c78eedc4dae]

Apply complete! Resources: 8 added, 0 changed, 0 destroyed.

D:\Cloud\terraform\Sample1>
